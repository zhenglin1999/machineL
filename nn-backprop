function [J grad] = nnCostFunction(nn_params, ...
                                   input_layer_size, ...
                                   hidden_layer_size, ...
                                   num_labels, ...
                                   X, y, lambda)
%   [J grad] = NNCOSTFUNCTON(nn_params, hidden_layer_size, num_labels, ...
%   X, y, lambda) computes the cost and gradient of the neural network. The
%   parameters for the neural network are "unrolled" into the vector
%   nn_params and need to be converted back into the weight matrices. 
% 
%   The returned parameter grad should be a "unrolled" vector of the
%   partial derivatives of the neural network.
%   TWO LAYERS

% Reshape nn_params back into the parameters Theta1 and Theta2, the weight matrices
% for our 2 layer neural network
Theta1 = reshape(nn_params(1:hidden_layer_size * (input_layer_size + 1)), ...
                 hidden_layer_size, (input_layer_size + 1));

Theta2 = reshape(nn_params((1 + (hidden_layer_size * (input_layer_size + 1))):end), ...
                 num_labels, (hidden_layer_size + 1));

% Setup some useful variables
m = size(X, 1);
         
% You need to return the following variables correctly 
J = 0;
Theta1_grad = zeros(size(Theta1));
Theta2_grad = zeros(size(Theta2));
alpha1 = zeros(size(X,1),hidden_layer_size);
alpha2 = zeros(size(X,1),num_labels);
delta3 = zeros(size(alpha2));
delta2 = zeros(size(alpha1));
temp1 = Theta1;
temp1(:,1) = zeros(size(Theta1,1),1); 
temp2 = Theta2;
temp2(:,1) = zeros(size(Theta2,1),1); 
X = [ones(m,1) X];

temp = zeros(size(y,1),num_labels);
for i = 1:size(y)
    temp(i,y(i))=1;
end
y = temp;

alpha1 = sigmoid(X*(Theta1'));
alpha1 = [ones(m,1) alpha1];
alpha2 = sigmoid(alpha1*(Theta2'));
J = (-1/m)*sum(sum(y.*log(alpha2)+(1-y).*log(1-alpha2)))+(lambda/(2*m))*(sum(sum(temp1.^2))+sum(sum(temp2.^2)));
delta3 = alpha2 - y;
delta2 = (delta3*Theta2).*[ones(m,1) (sigmoidGradient(X*(Theta1')))];
Theta1_grad = (1/m)*delta2(:,2:end)'*X + (lambda/m)*temp1;
Theta2_grad = (1/m)*delta3'*alpha1 + (lambda/m)*temp2;
grad = [Theta1_grad(:) ; Theta2_grad(:)];


end
